{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/best-joke/best-joke.component.css","webpack:///./src/app/components/best-joke/best-joke.component.html","webpack:///./src/app/components/best-joke/best-joke.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/jokes/delete-joke/delete-joke.component.css","webpack:///./src/app/components/jokes/delete-joke/delete-joke.component.html","webpack:///./src/app/components/jokes/delete-joke/delete-joke.component.ts","webpack:///./src/app/components/jokes/edit-joke/edit-joke.component.css","webpack:///./src/app/components/jokes/edit-joke/edit-joke.component.html","webpack:///./src/app/components/jokes/edit-joke/edit-joke.component.ts","webpack:///./src/app/components/jokes/jokes.component.css","webpack:///./src/app/components/jokes/jokes.component.html","webpack:///./src/app/components/jokes/jokes.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/profile/profile.component.css","webpack:///./src/app/components/profile/profile.component.html","webpack:///./src/app/components/profile/profile.component.ts","webpack:///./src/app/components/public-profile/public-profile.component.css","webpack:///./src/app/components/public-profile/public-profile.component.html","webpack:///./src/app/components/public-profile/public-profile.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/guard/auth.guard.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/joke.service.ts","webpack:///./src/app/services/validate.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<br>\\n<br>\\n<br>\\n\\n<ngx-alerts></ngx-alerts>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-src';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport {RouterModule, Routes} from '@angular/router';\nimport { AlertModule } from 'ngx-alerts';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {AuthGuard} from './guard/auth.guard';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { JokesComponent } from './components/jokes/jokes.component';\n\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\nimport { JokeService } from './services/joke.service';\nimport { EditJokeComponent } from './components/jokes/edit-joke/edit-joke.component';\nimport { DeleteJokeComponent } from './components/jokes/delete-joke/delete-joke.component';\nimport { PublicProfileComponent } from './components/public-profile/public-profile.component';\nimport { BestJokeComponent } from './components/best-joke/best-joke.component';\n\nconst appRoutes: Routes =  [\n\n  {path:'', component: HomeComponent},\n  {path:'jokes', component: JokesComponent, canActivate:[AuthGuard]},\n  {path:'register', component: RegisterComponent},\n  {path:'login', component: LoginComponent},\n  {path:'profile', component: ProfileComponent, canActivate:[AuthGuard]},\n  {path: 'user/:username', component: PublicProfileComponent, canActivate:[AuthGuard]},\n  {path: 'edit-joke/:id',component: EditJokeComponent, canActivate:[AuthGuard]},\n  {path: 'delete-joke/:id',component: DeleteJokeComponent, canActivate:[AuthGuard]}\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    ProfileComponent,\n    JokesComponent,\n    EditJokeComponent,\n    DeleteJokeComponent,\n    PublicProfileComponent,\n    BestJokeComponent\n  ],\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    AlertModule.forRoot({maxMessages: 5, timeout: 5000})\n  ],\n  providers: [JokeService,ValidateService, AuthService,AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","module.exports = \".container{\\r\\n    background-color:rgba(240, 88, 71, 0.384);\\r\\n    border-radius: 15px;\\r\\n    padding-left: 10px;\\r\\n    padding-right: 10px;\\r\\n    padding-bottom: 5px;\\r\\n    padding-top: 20px;\\r\\n    margin-top: 10px;\\r\\n    width: 280px;\\r\\n\\r\\n}\"","module.exports = \"\\n<div class=\\\"card text-white bg-danger mb-3 container\\\" style=\\\"max-width: 20rem;\\\">\\n    <div class=\\\"card-header\\\">{{this.vicevi[0].title}}</div>\\n    <div class=\\\"card-body\\\">\\n      <h4 class=\\\"card-title\\\">{{this.vicevi[0].username}}</h4>\\n      <p class=\\\"card-text\\\">{{this.vicevi[0].body}}</p>\\n    </div>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { JokeService } from '../../services/joke.service';\n@Component({\n  selector: 'app-best-joke',\n  templateUrl: './best-joke.component.html',\n  styleUrls: ['./best-joke.component.css']\n})\nexport class BestJokeComponent implements OnInit {\n  vicevi=[];\n  constructor(private jokeService:JokeService) { }\n\n  ngOnInit() {\n    this.jokeService.getAllJokes().subscribe(data => {\n      this.vicevi = data.jokes;\n      this.vicevi=this.vicevi.sort((obj1, obj2) => {\n        if (obj1.likes > obj2.likes)return -1;\n        if (obj1.likes < obj2.likes)return 1;\n      return 0;\n      });\n    });\n  \n  }\n}\n","module.exports = \"h3{\\r\\n    border-radius: 20px;\\r\\n    color:white;\\r\\n}\\r\\np{\\r\\n    border-radius: 20px;\\r\\n    color:white;\\r\\n}\"","module.exports = \"<div class=\\\"jumbotron text-center\\\">\\n  <img src=\\\"../../../assets/icon/smajli.png\\\" alt=\\\"\\\">\\n  <h1>Vicevi Srbija</h1>\\n  <h1 >Welcome</h1>\\n  <br>\\n  <br>\\n  <div>\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/register']\\\">Register </a>&nbsp;&nbsp;<a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/login']\\\">Login </a>\\n  </div>\\n</div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-4\\\">\\n    <h3>Autor:</h3>\\n    <p>Igor Caran</p>\\n  </div>\\n  \\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"h1{\\r\\n    color: white;\\r\\n}\\r\\np{\\r\\n    color:white;\\r\\n}\"","module.exports = \"<h1 class=\\\"page-header\\\">Delete Joke</h1>\\n\\n<!-- Custom Success/Error Message -->\\n<div class=\\\"row show-hide-message\\\" *ngIf=\\\"message\\\">\\n  <div [ngClass]=\\\"messageClass\\\">\\n    {{ message }}\\n  </div>\\n</div>\\n\\n<!-- Modal Confirmation Window -->\\n<div class=\\\"col-md-6\\\" *ngIf=\\\"foundJoke\\\">\\n  <!-- Model Outer Layer -->\\n  <div class=\\\"modal-content\\\">\\n    <!-- Modal Header -->\\n    <div class=\\\"modal-header\\\">\\n      <!-- Close Button -->\\n      <button type=\\\"button\\\" name=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n      <!-- Modal Title -->\\n      <h4 class=\\\"modal-title\\\">Confirm</h4>\\n    </div>\\n\\n    <!-- Modal Body -->\\n    <div class=\\\"modal-body\\\">\\n      <p>Are you sure you would like to delete this joke?</p>\\n    </div>\\n\\n    <!-- Modal Footer -->\\n    <div class=\\\"modal-footer\\\">\\n      <!-- Yes Button -->\\n      <button [disabled]=\\\"processing\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"deleteJoke()\\\">Yes</button>&nbsp;&nbsp;\\n      <!-- No Button -->\\n      <a routerLink=\\\"/jokes\\\"><button [disabled]=\\\"processing\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-danger\\\">No</button></a>\\n    </div>\\n  </div>\\n\\n  <br />\\n\\n  <!-- Panel -->\\n  <div class=\\\"panel panel-primary\\\">\\n    <!-- Panel Heading -->\\n    <div class=\\\"panel-heading\\\">\\n      <!-- Panel Title -->\\n      <h1 class=\\\"panel-title\\\">{{ joke.title }}</h1>\\n    </div>\\n\\n    <!-- Panel Body -->\\n    <div class=\\\"panel-body\\\">\\n      <p>{{ joke.body }}</p>\\n    </div>\\n\\n    <!-- Panel Footer -->\\n    <div class=\\\"panel-footer\\\">\\n      <p><strong>Posted by: </strong> {{ joke.createdBy }}</p>\\n      <br />\\n      <p><strong>Date: </strong> {{ joke.createdAt | date:'MMM dd, yyyy' }}</p>\\n    </div>\\n  </div>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { JokeService } from '../../../services/joke.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-delete-joke',\n  templateUrl: './delete-joke.component.html',\n  styleUrls: ['./delete-joke.component.css']\n})\nexport class DeleteJokeComponent implements OnInit {\n  message;\n  messageClass;\n  foundJoke = false;\n  processing = false;\n  joke;\n  currentUrl;\n  constructor(private jokeService: JokeService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router) { }\n\n    deleteJoke() {\n      this.processing = true; // Disable buttons\n      // Function for DELETE request\n      this.jokeService.deleteJoke(this.currentUrl.id).subscribe(data => {\n        // Check if delete request worked\n        if (!data.success) {\n          this.messageClass = 'alert alert-danger'; // Return error bootstrap class\n          this.message = data.message; // Return error message\n        } else {\n          this.messageClass = 'alert alert-success'; // Return bootstrap success class\n          this.message = data.message; // Return success message\n          // After two second timeout, route to joke page\n          setTimeout(() => {\n            this.router.navigate(['/jokes']); // Route users to joke page\n          }, 2000);\n        }\n      });\n    }\n  \n    ngOnInit() {\n      this.currentUrl = this.activatedRoute.snapshot.params; // Get URL paramaters on page load\n      // Function for GET request to retrieve joke\n      this.jokeService.getSingleJoke(this.currentUrl.id).subscribe(data => {\n        // Check if request was successfull\n        if (!data.success) {\n          this.messageClass = 'alert alert-danger'; // Return bootstrap error class\n          this.message = data.message; // Return error message\n        } else {\n          // Create the joke object to use in HTML\n          this.joke = {\n            title: data.joke.title, // Set title\n            body: data.joke.body, // Set body\n            createdBy: data.joke.createdBy, // Set created_by field\n            createdAt: data.joke.createdAt // Set created_at field\n          }\n          this.foundJoke = true; // Displaly joke window\n        }\n      });\n    }\n\n}\n","module.exports = \"h1{\\r\\n    color: white;\\r\\n}\\r\\np{\\r\\n    color:white;\\r\\n}\"","module.exports = \"<h1 class=\\\"page-header\\\">Edit Joke</h1>\\n\\n<!-- Custom Success/Erro Message -->\\n<div class=\\\"row show-hide-message\\\" *ngIf=\\\"message\\\">\\n  <div [ngClass]=\\\"messageClass\\\">\\n    <p>{{ message }}</p>\\n  </div>\\n</div>\\n\\n<!-- Edit Joke Form -->\\n<form (submit)=\\\"updateJokeSubmit()\\\" *ngIf=\\\"!loading\\\">\\n  <!-- Title Field -->\\n  <div class=\\\"form-group\\\">\\n    <p for=\\\"title\\\">Title</p>\\n    <!-- Title Input -->\\n    <input [disabled]=\\\"processing\\\" type=\\\"text\\\" name=\\\"title\\\" placeholder=\\\"*Joke Title\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"joke.title\\\" />\\n  </div>\\n\\n  <!-- Body Field -->\\n  <div class=\\\"form-group\\\">\\n    <p for=\\\"body\\\">Body</p>\\n    <!-- Body Input -->\\n    <textarea [disabled]=\\\"processing\\\" name=\\\"body\\\" rows=\\\"8\\\" cols=\\\"80\\\" [(ngModel)]=\\\"joke.body\\\" class=\\\"form-control\\\" placeholder=\\\"*Joke Body\\\"></textarea>\\n  </div>\\n\\n  <!-- Delete Button -->\\n  <a [routerLink]=\\\"['/delete-joke/', joke._id]\\\"><button  [disabled]=\\\"processing\\\"  type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-danger\\\">Delete</button></a>&nbsp;&nbsp;\\n  <!-- Go Back Button -->\\n  <button [disabled]=\\\"processing\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"goBack()\\\">Go Back</button>&nbsp;&nbsp;\\n  <!-- Save Changes Button -->\\n  <button [disabled]=\\\"processing\\\" type=\\\"submit\\\" name=\\\"save\\\" class=\\\"btn btn-info\\\">Save Changes</button>\\n\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { JokeService } from '../../../services/joke.service';\n\n@Component({\n  selector: 'app-edit-joke',\n  templateUrl: './edit-joke.component.html',\n  styleUrls: ['./edit-joke.component.css']\n})\nexport class EditJokeComponent implements OnInit {\n  \n  message;\n  messageClass;\n  joke;\n  processing = false;\n  currentUrl;\n  loading = true;\n  \n  constructor(private location: Location,\n    private activatedRoute: ActivatedRoute,\n    private jokeService: JokeService,\n    private router: Router) { }\n\n    updateJokeSubmit() {\n      this.processing = true; // Lock form fields\n      // Function to send joke object to backend\n      this.jokeService.editJoke(this.joke).subscribe(data => {\n        // Check if PUT request was a success or not\n        if (!data.success) {\n          this.messageClass = 'alert alert-danger'; // Set error bootstrap class\n          this.message = data.message; // Set error message\n          this.processing = false; // Unlock form fields\n        } else {\n          this.messageClass = 'alert alert-success'; // Set success bootstrap class\n          this.message = data.message; // Set success message\n          // After two seconds, navigate back to joke page\n          setTimeout(() => {\n            this.router.navigate(['/jokes']); // Navigate back to route page\n          }, 2000);\n        }\n      });\n    }\n  \n    // Function to go back to previous page\n    goBack() {\n      this.location.back();\n    }\n  \n    ngOnInit() {\n      this.currentUrl = this.activatedRoute.snapshot.params; // When component loads, grab the id\n      // Function to GET current joke with id in params\n      this.jokeService.getSingleJoke(this.currentUrl.id).subscribe(data => {\n        // Check if GET request was success or not\n        if (!data.success) {\n          this.messageClass = 'alert alert-danger'; // Set bootstrap error class\n          this.message = 'Joke not found.'; // Set error message\n        } else {\n          this.joke = data.joke; // Save joke object for use in HTML\n          this.loading = false; // Allow loading of joke form\n        }\n      });\n  \n    }\n\n}\n","module.exports = \"/* Dropdown Button */\\r\\n.dropbtn {\\r\\n    background-color: #4CAF50;\\r\\n    color: white;\\r\\n    padding: 16px;\\r\\n    font-size: 16px;\\r\\n    border: none;\\r\\n    cursor: pointer;\\r\\n}\\r\\n/* The container <div> - needed to position the dropdown content */\\r\\n.dropdown {\\r\\n    position: relative;\\r\\n    display: inline-block;\\r\\n}\\r\\n/* Dropdown Content (Hidden by Default) */\\r\\n.dropdown-content {\\r\\n    display: none;\\r\\n    position: absolute;\\r\\n    background-color: #f9f9f9;\\r\\n    min-width: 160px;\\r\\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\r\\n    z-index: 1;\\r\\n}\\r\\n/* Links inside the dropdown */\\r\\n.dropdown-content a {\\r\\n    color: black;\\r\\n    padding: 12px 16px;\\r\\n    text-decoration: none;\\r\\n    display: block;\\r\\n}\\r\\n/* Change color of dropdown links on hover */\\r\\n.dropdown-content a:hover {background-color: #f1f1f1}\\r\\n/* Show the dropdown menu on hover */\\r\\n.dropdown:hover .dropdown-content {\\r\\n    display: block;\\r\\n}\\r\\n/* Change the background color of the dropdown button when the dropdown content is shown */\\r\\n.dropdown:hover .dropbtn {\\r\\n    background-color: #3e8e41;\\r\\n}\\r\\nbutton{\\r\\n    border-radius: 20px;\\r\\n    font-size: 12px;\\r\\n    \\r\\n}\\r\\n.container{\\r\\n    background-color:rgb(53, 7, 7);\\r\\n    border-radius: 15px;\\r\\n    width: 800px;\\r\\n    margin: 10px;\\r\\n}\\r\\n.containerpost{\\r\\n    background-color:rgb(184, 33, 33);\\r\\n    border-radius: 15px;\\r\\n    padding-left: 20px;\\r\\n    padding-right: 20px;\\r\\n    padding-bottom: 5px;\\r\\n    padding-top: 5px;\\r\\n    margin: 10px;\\r\\n}\\r\\n.containerTitle{\\r\\n    background-color:rgba(189, 70, 57, 0.918);\\r\\n    border-radius: 15px;\\r\\n    padding-left: 20px;\\r\\n    padding-right: 20px;\\r\\n    padding-bottom: 5px;\\r\\n    padding-top: 5px;\\r\\n\\r\\n}\\r\\n.containerBody{\\r\\n    background-color:rgba(189, 64, 51, 0.911);\\r\\n    border-radius: 15px;\\r\\n    padding-left: 20px;\\r\\n    padding-right: 20px;\\r\\n    padding-bottom: 5px;\\r\\n    padding-top: 5px;\\r\\n    margin: 8px;\\r\\n}\\r\\n.containerComment{\\r\\n    background-color:rgba(236, 75, 57, 0.384);\\r\\n    border-radius: 20px;\\r\\n    padding-left: 3px;\\r\\n    padding-right: 3px;\\r\\n    padding-bottom: 3px;\\r\\n    padding-top: 1px;\\r\\n}\\r\\n.containerComments{\\r\\n    background-color:rgba(214, 78, 62, 0.836);\\r\\n    border-radius: 20px;\\r\\n    padding-left: 20px;\\r\\n    padding-right: 10px;\\r\\n    padding-bottom: 3px;\\r\\n    padding-top: 3px;\\r\\n}\\r\\n.btn{\\r\\n    margin: 8px;\\r\\n    padding: 5px;\\r\\n}\\r\\nh1{\\r\\n    color: white;\\r\\n}\"","module.exports = \"<div class=\\\"float-right\\\">\\n    <app-best-joke></app-best-joke>\\n  </div>\\n<div class=\\\"float-left container\\\">\\n  <!-- Custom Message -->\\n  <div class=\\\"row show-hide-message\\\" *ngIf=\\\"message && newPost\\\">\\n    <div [ngClass]=\\\"messageClass\\\">\\n      {{ message }}\\n    </div>\\n  </div>\\n\\n  <!-- New Post Button -->\\n  <div class=\\\"containerpost\\\">\\n    <button type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-primary \\\" *ngIf=\\\"!newPost\\\" (click)=\\\"newJokeForm()\\\"><b>New Post</b>\\n    </button>\\n\\n    <!-- Reload Button -->\\n    <button [disabled]=\\\"loadingBlogs\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-default\\\" *ngIf=\\\"!newPost\\\" (click)=\\\"reloadJokes()\\\"><span\\n        class=\\\"glyphicon glyphicon-repeat\\\"></span>&nbsp;&nbsp;<b>Reload</b>\\n    </button>\\n  </div>\\n  <!-- New Blog Form -->\\n  <form [formGroup]=\\\"form\\\" name=\\\"JokeForm\\\" (submit)=\\\"onJokeSubmit()\\\" *ngIf=\\\"newPost\\\">\\n    <!-- Title Input -->\\n    <div class=\\\"form-group lead\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <h1 for=\\\"title\\\">Title</h1>\\n        <div [ngClass]=\\\"{'has-success': form.controls.title.valid, 'has-error': form.controls.title.dirty && form.controls.title.errors}\\\">\\n          <input type=\\\"text\\\" name=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"*Joke Title\\\" autocomplete=\\\"off\\\" formControlName=\\\"title\\\"\\n          />\\n          <ul class=\\\"help-block\\\">\\n            <li *ngIf=\\\"form.controls.title.dirty && form.controls.title.errors?.required\\\">This field is required.</li>\\n            <li *ngIf=\\\"(form.controls.title.dirty && form.controls.title.errors?.minlength) || (form.controls.title.dirty && form.controls.title.errors?.maxlength)\\\">Max\\n              length: 50, Min length: 5</li>\\n            <li *ngIf=\\\"form.controls.title.dirty && form.controls.title.errors?.alphaNumericValidation\\\">Must be a letter\\n              or number</li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Body Input -->\\n    <div class=\\\"form-group containerpost\\\">\\n      <p for=\\\"body\\\">Body</p>\\n      <div [ngClass]=\\\"{'has-success': form.controls.body.valid, 'has-error': form.controls.body.dirty && form.controls.body.errors}\\\">\\n        <textarea name=\\\"body\\\" rows=\\\"8\\\" cols=\\\"80\\\" placeholder=\\\"*Body\\\" class=\\\"form-control\\\" formControlName=\\\"body\\\"></textarea>\\n        <ul class=\\\"help-block\\\">\\n          <li *ngIf=\\\"form.controls.body.dirty && form.controls.body.errors?.required\\\">This field is required.</li>\\n          <li *ngIf=\\\"(form.controls.body.dirty && form.controls.body.errors?.minlength) || (form.controls.body.dirty && form.controls.body.errors?.maxlength)\\\">Max\\n            length: 500, Min length: 5</li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n    <!-- Go Back Button -->\\n    <button [disabled]=\\\"processing\\\" type=\\\"button\\\" name=\\\"button\\\" (click)=\\\"goBack()\\\" class=\\\"btn btn-warning\\\">Go Back</button>\\n    <!-- Submit Button -->\\n    <button [disabled]=\\\"processing || !form.valid\\\" type=\\\"submit\\\" name=\\\"button\\\" class=\\\"btn btn-success\\\">Submit</button>\\n\\n  </form>\\n  <!-- New joke Form -->\\n\\n  <!-- Panel Start -->\\n  <div *ngIf=\\\"!newPost\\\">\\n    <!-- Panel Outer Layer -->\\n    <div class=\\\"panel panel-primary containerpost\\\" *ngFor=\\\"let joke of jokePosts\\\">\\n\\n      <!-- Panel Title -->\\n      <div class=\\\"panel-heading containerTitle\\\">\\n        <h3 class=\\\"panel-title\\\">{{ joke.title }}</h3>\\n      </div>\\n\\n      <!-- Panel Body -->\\n      <div class=\\\"panel-body containerBody\\\">\\n        {{ joke.body }}\\n      </div>\\n\\n      <!-- Panel Footer Start -->\\n      <div class=\\\"panel-footer containerBody\\\">\\n        <strong>Posted by: </strong>{{ joke.createdBy }}\\n        <br />\\n        <strong>Date: </strong>{{ joke.createdAt | date:'MMM dd, yyyy' }}\\n        <br />\\n        <div *ngIf=\\\"username === joke.createdBy\\\">\\n          <strong>Likes: </strong>{{ joke.likes }}\\n          <br />\\n          <strong>Dislikes: </strong>{{ joke.dislikes }}\\n\\n        </div>\\n\\n        <!-- Edit Button -->\\n        <a [routerLink]=\\\"['/edit-joke/', joke._id]\\\" *ngIf=\\\"username === joke.createdBy\\\"><button type=\\\"button\\\" name=\\\"button\\\"\\n            class=\\\"btn btn-lg btn-info \\\">Edit</button></a>\\n\\n        <!-- Delete Button -->\\n        <a [routerLink]=\\\"['/delete-joke/', joke._id]\\\" *ngIf=\\\"username === joke.createdBy\\\"><button type=\\\"button\\\" name=\\\"button\\\"\\n            class=\\\"btn btn-lg btn-danger \\\">Delete</button></a>\\n\\n        <!-- Likes Dropdown  -->\\n        <div class=\\\"dropdown\\\">\\n          <!-- Like Button -->\\n          <button [disabled]=\\\"joke.likedBy.indexOf(username) > -1\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-sm btn-primary\\\" *ngIf=\\\"username !== joke.createdBy\\\"\\n            (click)=\\\"likeJoke(joke._id)\\\"><span class=\\\"glyphicon glyphicon-thumbs-up\\\">&nbsp;</span><img src=\\\"../../../assets/icon/like.png\\\"\\n              alt=\\\"Like\\\" style=\\\"width:30px;height:20px;\\\"> {{ joke.likes }}\\n          </button>\\n          <!-- Dropdown Menu Items -->\\n          <div class=\\\"dropdown-content\\\">\\n            <a [routerLink]=\\\"['/users/', liker]\\\" *ngFor=\\\"let liker of joke.likedBy\\\">{{ liker }}</a>\\n          </div>\\n        </div>\\n\\n        <!-- Dislikes Dropdown  -->\\n        <div class=\\\"dropdown\\\">\\n          <!-- Dislike Button -->\\n          <button [disabled]=\\\"joke.dislikedBy.indexOf(username) > -1\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-sm btn-default \\\" *ngIf=\\\"username !== joke.createdBy\\\"\\n            (click)=\\\"dislikeJoke(joke._id)\\\"><span class=\\\"glyphicon glyphicon-thumbs-down\\\">&nbsp;<img src=\\\"../../../assets/icon/dislike.png\\\"\\n                alt=\\\"Dislike\\\" style=\\\"width:30px;height:20px;\\\"></span>\\n            {{ joke.dislikes }}\\n          </button>\\n          <!-- Dropdown Menu Items -->\\n          <div class=\\\"dropdown-content\\\">\\n            <a [routerLink]=\\\"['/users/', disliker]\\\" *ngFor=\\\"let disliker of joke.dislikedBy\\\">{{ disliker }}</a>\\n          </div>\\n        </div>\\n\\n\\n      </div>\\n      <!-- Panel Footer End -->\\n\\n      <ul class=\\\"list-group containerBody\\\">\\n        <li class=\\\"list-group-item containerBody\\\">\\n          <!-- Post Comment Button -->\\n          <button type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"draftComment(joke._id)\\\" [disabled]=\\\"newComment.indexOf(joke._id) > -1\\\">Post\\n            Comment\\n          </button>\\n          <div class=\\\"containerpost\\\" *ngIf=\\\"newComment.indexOf(joke._id) > -1\\\">\\n\\n            <!-- Form: Comment Form Start -->\\n            <form [formGroup]=\\\"commentForm\\\">\\n              <!-- Textarea Input -->\\n              <textarea name=\\\"comment\\\" rows=\\\"1\\\" cols=\\\"10\\\" class=\\\"form-control\\\" formControlName=\\\"comment\\\"></textarea>\\n              <!-- Validation -->\\n              <div [ngClass]=\\\"{'has-success': !commentForm.controls.comment.errors && commentForm.controls.comment.dirty, 'has-error': commentForm.controls.comment.dirty && commentForm.controls.comment.errors}\\\">\\n                <ul class=\\\"help-block\\\">\\n                  <li *ngIf=\\\"commentForm.controls.comment.errors?.required && commentForm.controls.comment.dirty\\\">This field\\n                    is required.</li>\\n                  <li *ngIf=\\\"(commentForm.controls.comment.errors?.maxlength && commentForm.controls.comment.dirty) ||(commentForm.controls.comment.errors?.minlength && commentForm.controls.comment.dirty)\\\">Comment\\n                    must be at least 1 character but no more than 200.</li>\\n                </ul>\\n              </div>\\n              <!-- Post Button -->\\n              <button [disabled]=\\\"!commentForm.valid || processing\\\" type=\\\"submit\\\" name=\\\"button\\\" class=\\\"btn btn-sm btn-info\\\" (click)=\\\"postComment(joke._id)\\\">Post</button>\\n              <!-- Cancel Button -->\\n              <button [disabled]=\\\"processing\\\" type=\\\"button\\\" name=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"cancelComment(joke._id)\\\">Cancel</button>\\n            </form>\\n\\n          </div>\\n\\n          <!-- Show Comments -->\\n          <li *ngIf=\\\"enabledComments.indexOf(joke._id) === -1 && joke.comments.length > 0\\\" class=\\\"list-group-item containerComment\\\">\\n\\n            <span (click)=\\\"expand(joke._id)\\\">\\n              <img src=\\\"../../../assets/icon/arrowRight.png\\\" alt=\\\"\\\" style=\\\"width:20px;height:20px;\\\"> Show comments&nbsp;&nbsp;\\n              <div class=\\\"glyphicon glyphicon-comment\\\"></div>\\n            </span>\\n          </li>\\n\\n          <!-- Hide Comments -->\\n          <li *ngIf=\\\"enabledComments.indexOf(joke._id) > -1\\\" class=\\\"list-group-item containerComment\\\">\\n\\n            <span (click)=\\\"collapse(joke._id)\\\">\\n              <img src=\\\"../../../assets/icon/arrowRight.png\\\" alt=\\\"\\\" style=\\\"width:20px;height:20px;\\\"> Hide Comments&nbsp;&nbsp;\\n              <div class=\\\"glyphicon glyphicon-comment\\\"></div>\\n            </span>\\n          </li>\\n\\n          <!-- Comment -->\\n          <div *ngIf=\\\"enabledComments.indexOf(joke._id) > -1\\\">\\n            <li *ngFor=\\\"let comment of joke.comments\\\" class=\\\"list-group-item containerComments\\\">\\n              <strong>{{ comment.commentator }}:</strong> {{ comment.comment }}\\n            </li>\\n          </div>\\n      </ul>\\n\\n    </div>\\n\\n  </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { JokeService } from '../../services/joke.service';\n\n\n@Component({\n  selector: 'app-jokes',\n  templateUrl: './jokes.component.html',\n  styleUrls: ['./jokes.component.css']\n})\nexport class JokesComponent implements OnInit {\n\n  messageClass;\n  message;\n  newPost = false;\n  loadingJokes = false;\n  form;\n  commentForm;\n  processing = false;\n  username;\n  jokePosts;\n  newComment = [];\n  enabledComments = [];\n\n\n  constructor(private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private jokeService: JokeService)\n    { \n      this.createNewJokeForm();\n      this.createCommentForm();\n    }\n\n    createNewJokeForm() {\n      this.form = this.formBuilder.group({\n        title: ['', Validators.compose([\n          Validators.required,\n          Validators.maxLength(50),\n          Validators.minLength(5),\n          this.alphaNumericValidation\n        ])],\n        body: ['', Validators.compose([\n          Validators.required,\n          Validators.maxLength(500),\n          Validators.minLength(5)\n        ])]\n      })\n    }\n    \n    createCommentForm() {\n      this.commentForm = this.formBuilder.group({\n        comment: ['', Validators.compose([\n          Validators.required,\n          Validators.minLength(1),\n          Validators.maxLength(200)\n        ])]\n      })\n    }\n\n    enableCommentForm() {\n      this.commentForm.get('comment').enable(); // Enable comment field\n    }\n\n    disableCommentForm() {\n      this.commentForm.get('comment').disable(); // Disable comment field\n    }\n\n    enableFormNewJokeForm() {\n      this.form.get('title').enable(); // Enable title field\n      this.form.get('body').enable(); // Enable body field\n    }\n\n    disableFormNewJokeForm() {\n      this.form.get('title').disable(); // Disable title field\n      this.form.get('body').disable(); // Disable body field\n    }\n    \n    alphaNumericValidation(controls) {\n      const regExp = new RegExp(/^[a-zA-Z0-9 ]+$/); // Regular expression to perform test\n      // Check if test returns false or true\n      if (regExp.test(controls.value)) {\n        return null; // Return valid\n      } else {\n        return { 'alphaNumericValidation': true } // Return error in validation\n      }\n    }\n  newJokeForm(){\n    this.newPost=true;\n\n  }\n  draftComment(id) {\n    this.commentForm.reset(); // Reset the comment form each time users starts a new comment\n    this.newComment = []; // Clear array so only one post can be commented on at a time\n    this.newComment.push(id); // Add the post that is being commented on to the array\n  }\n  cancelComment(id) {\n    const index = this.newComment.indexOf(id); // Check the index of the blog post in the array\n    this.newComment.splice(index, 1); // Remove the id from the array to cancel post submission\n    this.commentForm.reset(); // Reset  the form after cancellation\n    this.enableCommentForm(); // Enable the form after cancellation\n    this.processing = false; // Enable any buttons that were locked\n  }\n  reloadJokes() {\n    this.loadingJokes = true; // Used to lock button\n    this.getAllJokes(); // Add any new blogs to the page\n    setTimeout(() => {\n      this.loadingJokes = false; // Release button lock after four seconds\n    }, 4000);\n  }\n\n  onJokeSubmit() {\n    this.processing = true; // Disable submit button\n    this.disableFormNewJokeForm(); // Lock form\n    // Create blog object from form fields\n    const joke = {\n      title: this.form.get('title').value, // Title field\n      body: this.form.get('body').value, // Body field\n      createdBy: this.username // CreatedBy field\n    }\n\n    // Function to save blog into database\n    this.jokeService.newJoke(joke).subscribe(data => {\n      // Check if blog was saved to database or not\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Return error class\n        this.message = data.message; // Return error message\n        this.processing = false; // Enable submit button\n        this.enableFormNewJokeForm(); // Enable form\n      } else {\n        this.messageClass = 'alert alert-success'; // Return success class\n        this.message = data.message; // Return success message\n        this.getAllJokes();\n\n        setTimeout(() => {\n          this.newPost = false; // Hide form\n          this.processing = false; // Enable submit button\n          this.message = false; // Erase error/success message\n          this.form.reset(); // Reset all form fields\n          this.enableFormNewJokeForm(); // Enable the form fields\n        }, 2000);\n      }\n    });\n  }\n\n  goBack() {\n    window.location.reload(); // Clear all variable states\n  }\n  getAllJokes() {\n    // Function to GET all joke from database\n    this.jokeService.getAllJokes().subscribe(data => {\n      this.jokePosts = data.jokes; // Assign array to use in HTML\n    });\n  }\n  likeJoke(id) {\n    // Service to like a joke post\n    this.jokeService.likeJoke(id).subscribe(data => {\n      this.getAllJokes(); // Refresh joke after like\n    });\n  }\n\n// Function to disliked a joke post\n  dislikeJoke(id) {\n    // Service to dislike a joke post\n    this.jokeService.dislikeJoke(id).subscribe(data => {\n      this.getAllJokes(); // Refresh joke after dislike\n    });\n  }\n\n\n  postComment(id) {\n    this.disableCommentForm(); // Disable form while saving comment to database\n    this.processing = true; // Lock buttons while saving comment to database\n    const comment = this.commentForm.get('comment').value; // Get the comment value to pass to service function\n    // Function to save the comment to the database\n    this.jokeService.postComment(id, comment).subscribe(data => {\n      this.getAllJokes(); // Refresh all joke to reflect the new comment\n      const index = this.newComment.indexOf(id); // Get the index of the joke id to remove from array\n      this.newComment.splice(index, 1); // Remove id from the array\n      this.enableCommentForm(); // Re-enable the form\n      this.commentForm.reset(); // Reset the comment form\n      this.processing = false; // Unlock buttons on comment form\n      if (this.enabledComments.indexOf(id) < 0) this.expand(id); // Expand comments for user on comment submission\n    });\n  }\n\n  // Expand the list of comments\n  expand(id) {\n    this.enabledComments.push(id); // Add the current joke post id to array\n  }\n\n  // Collapse the list of comments\n  collapse(id) {\n    const index = this.enabledComments.indexOf(id); // Get position of id in array\n    this.enabledComments.splice(index, 1); // Remove id from array\n  }\n  ngOnInit() {\n    this.authService.getProfile().subscribe(profile => {\n      this.username = profile.user.username; // Used when creating new joke posts and comments\n    });\n    this.getAllJokes();\n  }\n\n}\n","module.exports = \"h1{\\r\\n    color: white;\\r\\n}\\r\\np{\\r\\n    color:white;\\r\\n}\"","module.exports = \"\\n<h1>Login</h1><br>\\n<form (submit)=\\\"onLoginSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <p>Username</p>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"username\\\" name=\\\"username\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <p>Password</p>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\">\\n\\n    </div>\\n    <input type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Login\\\">\\n</form>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from \"../../services/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { AlertService } from 'ngx-alerts';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: String;\n  password: String;\n\n\n  constructor(private authService:AuthService,\n              private router: Router,\n              private Alert:AlertService\n             ) { }\n\n  ngOnInit() {\n  }\n  onLoginSubmit(){\n    var user= {\n      username: this.username,\n      password: this.password\n    }\n    this.authService.authenticateUser(user).subscribe(data => {\n        if(data.success){\n          this.authService.storeUserData(data.token, data.user);\n          this.Alert.success(\"You are now logged in\");\n          this.router.navigate(['jokes']);\n        }else {\n          this.Alert.danger(data.msg);\n          this.router.navigate(['login']);\n        }\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"  <nav class=\\\"navbar navbar-expand-xl navbar-dark bg-dark fixed-top\\\">\\n      <a class=\\\"navbar-brand\\\" href=\\\"#\\\"> <img src=\\\"../../../assets/icon/smajli.png\\\" style=\\\"width:50px;height:50px;\\\" alt=\\\"\\\">  Vicevii</a>\\n\\n      <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbar\\\" layout=\\\"row\\\">\\n        <ul class=\\\"nav navbar-nav navbar-left mr-auto\\\">\\n          <li class=\\\"nav-item\\\" layout-align=\\\"start center\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n            <a class=\\\"nav-link\\\" [routerLink]=\\\"['/']\\\">Home </a>\\n          </li>\\n        </ul>\\n\\n        <ul class=\\\"nav navbar-nav navbar-right ml-auto \\\"  >\\n          <div *ngIf=\\\"!isLoggedIn(); then NijePrijavljen else Prijavljen\\\"></div>\\n          <ng-template #NijePrijavljen>\\n            <li class=\\\"nav-item\\\" layout-align=\\\"end center\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n              <a class=\\\"nav-link\\\" [routerLink]=\\\"['/login']\\\">login </a>\\n            </li>\\n            \\n            <li class=\\\"nav-item\\\" layout-align=\\\"end center\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n              <a class=\\\"nav-link\\\" [routerLink]=\\\"['/register']\\\">Register </a>\\n            </li>\\n          </ng-template>\\n          \\n          <ng-template #Prijavljen>\\n            <li class=\\\"nav-item\\\" layout-align=\\\"end center\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n              <a class=\\\"nav-link\\\" [routerLink]=\\\"['/jokes']\\\">Jokes </a>\\n            </li>\\n            <li class=\\\"nav-item\\\" layout-align=\\\"end center\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n              <a class=\\\"nav-link\\\" [routerLink]=\\\"['/profile']\\\">Profile </a>\\n            </li>\\n            \\n            <li class=\\\"nav-item\\\" layout-align=\\\"end center\\\">\\n              <a class=\\\"nav-link\\\"  (click)=\\\"onLogoutClick()\\\" href='#'>Logout </a>\\n            </li>\\n          </ng-template>\\n        </ul>\\n      </div>\\n    </nav>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from \"../../services/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { AlertService } from \"ngx-alerts\";\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(\n    private authService:AuthService,\n    private router:Router,\n    private Alert:AlertService\n  ) { }\n\n  ngOnInit() {\n  }\n  onLogoutClick(){\n     this.authService.logout();\n     this.Alert.success(\"You are now logged out\");\n     this.router.navigate(['/login']);\n     return false;\n  }\n  isLoggedIn(){\n    return this.authService.isLogged();\n  }\n}\n","module.exports = \"h2{\\r\\n    color: white;\\r\\n}\"","module.exports = \"<div *ngIf=\\\"user\\\">\\n    <h2 class=\\\"page-header\\\">{{user.name}}</h2>\\n    <ul class=\\\"list-group\\\">\\n      <li class=\\\"list-group-item\\\">Username: {{user.username}}</li>\\n      <li class=\\\"list-group-item\\\">Email: {{user.email}}</li>\\n    </ul>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user:Object;\n  constructor(private authService:AuthService, private router:Router) { }\n\n  ngOnInit() {\n\n    this.authService.getProfile().subscribe(profile =>{\n      this.user=profile.user;\n    },\n    err=>{\n      console.log(err);\n      return false;\n    });\n}\n\n\n}","module.exports = \"\"","module.exports = \"<h1 class=\\\"page-header\\\">Public Profile</h1>\\n\\n<!-- Custom Success/Error Message -->\\n<div class=\\\"row show-hide-message\\\" *ngIf=\\\"message\\\">\\n  <div [ngClass]=\\\"messageClass\\\">\\n    {{ message }}\\n  </div>\\n</div>\\n\\n<!-- Table to Display User Info -->\\n<ul *ngIf=\\\"foundProfile\\\" class=\\\"list-group\\\">\\n  <!-- Username -->\\n  <li class=\\\"list-group-item\\\"><strong>Username: </strong>{{ username }}</li>\\n  <!-- E-Mail -->\\n  <li class=\\\"list-group-item\\\"><strong>E-Mail: </strong>{{ email }}</li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-public-profile',\n  templateUrl: './public-profile.component.html',\n  styleUrls: ['./public-profile.component.css']\n})\nexport class PublicProfileComponent implements OnInit {\n  currentUrl;\n  username;\n  email;\n  foundProfile = false;\n  messageClass;\n  message;\n\n  constructor(private authService: AuthService,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit() {\n    /*this.currentUrl = this.activatedRoute.snapshot.params; // Get URL parameters on page load\n    // Service to get the public profile data\n    this.authService.getPublicProfile(this.currentUrl.username).subscribe(data => {\n      // Check if user was found in database\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Return bootstrap error class\n        this.message = data.message; // Return error message\n      } else {\n        this.username = data.user.username; // Save the username for use in HTML\n        this.email = data.user.email; // Save the email for use in HTML\n      }\n    });*/\n  }\n\n}\n","module.exports = \"h1{\\r\\n    color: white;\\r\\n}\\r\\np{\\r\\n    color:white;\\r\\n}\"","module.exports = \"<h1 class=\\\"page-header\\\">Register</h1>\\n<form (submit)=\\\"onRegisterSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n    <p>Name</p>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"name\\\" name=\\\"name\\\" class=\\\"form-control\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <p>Username</p>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"username\\\" name=\\\"username\\\" class=\\\"form-control\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <p>Email</p>\\n    <input type=\\\"text\\\" [(ngModel)]=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control\\\" >\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <p>Password</p>\\n    <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\">\\n  </div>\\n  <input type=\\\"submit\\\" class=\\\"btn btn-primary\\\" value=\\\"Submit\\\">\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport {ValidateService} from '../../services/validate.service'\nimport {AuthService} from '../../services/auth.service'\nimport { AlertService } from 'ngx-alerts';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  name: String;\n  username: String;\n  email: String;\n  password: String;\n\n  constructor(\n    private alertService: AlertService,\n    private validateService: ValidateService,\n    private authService:AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onRegisterSubmit(){\n    const user = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password\n    }\n\n    // Required Fields\n    if(!this.validateService.validateRegister(user)){\n      this.alertService.warning('Please fill in all fields');\n      return false;\n    }\n\n    // Validate Email\n    if(!this.validateService.validateEmail(user.email)){\n      this.alertService.warning('Please use a valid email');\n      return false;\n    }\n\n    // Register user\n    this.authService.registerUser(user).subscribe(data => {\n      if(data.success){\n        this.alertService.success('You are now registered');\n        this.router.navigate(['/login']);\n      } else {\n        this.alertService.danger('Something went wrong')\n        this.router.navigate(['/register']);\n      }\n    });\n\n  }\n\n}\n","import {Injectable} from '@angular/core';\r\nimport {Router,CanActivate} from '@angular/router';\r\nimport {AuthService} from '../services/auth.service';\r\n\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate{\r\n   constructor(private authService:AuthService,private router:Router){\r\n\r\n   }\r\n   \r\n   canActivate(){\r\n    if (!this.authService.isLogged()) {\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      }\r\n      return true;\r\n   }\r\n}","import { Injectable } from '@angular/core';\nimport {Http, Headers} from '@angular/http';\nimport {map} from'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  authToken:any;\n  user:any;\n\n  constructor(private http:Http) { }\n\n  registerUser(user){\n    var body=JSON.stringify(user);\n    let headers =new Headers();\n    headers.append('Content-Type','application/json');\n\n\n    return this.http.post('users/register',user,{headers:headers}).pipe(map(res=>res.json()));\n\n  }\n  authenticateUser(user){\n    var body=JSON.stringify(user);\n    let headers =new Headers();\n    headers.append('Content-Type','application/json');\n    console.log(user);\n    return this.http.post('users/authenticate', user,{headers: headers}).pipe(map(res => res.json()));\n\n  }\n  getProfile(){\n   let headers = new Headers();\n   this.loadToken();\n   headers.append('Authorization',this.authToken);\n   headers.append('Content-Type','application/json');\n   return this.http.get('users/profile',{headers: headers}).pipe(map(res => res.json()));\n  }\n  getJokes(){\n    let headers = new Headers();\n    this.loadToken();\n    headers.append('Authorization',this.authToken);\n    headers.append('Content-Type','application/json');\n    return this.http.get('jokes/see',{headers: headers}).pipe(map(res => res.json()));\n  \n  }\n  storeUserData(token,user){\n    localStorage.setItem('id_token',token);\n    localStorage.setItem('user',JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n\n  }\n  loadToken(){\n    const token= localStorage.getItem('id_token');\n    this.authToken=token;\n  }\n  isLogged(){\n    return localStorage.getItem('id_token') !== null;\n  }\n  /*isLoggedIn(){\n    const token= localStorage.getItem('id_token');\n    return !this.jwtHelper.isTokenExpired(token);\n  }*/\n  logout(){\n    this.authToken = null;\n    this.user=null;\n    localStorage.clear();\n  }\n  \n}\n\n","import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class JokeService {\n\n  options;\n\n  constructor(\n    private authService: AuthService,\n    private http: Http\n  ) { }\n\n  // Function to create a new joke post\n  newJoke(joke) {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    return this.http.post('jokes/newJoke', joke, this.options).pipe(map(res => res.json()));\n  }\n  getAllJokes() {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    return this.http.get('jokes/allJokes', this.options).pipe(map(res => res.json()));\n  }\n  getSingleJoke(id) {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    return this.http.get('jokes/singleJoke/' + id, this.options).pipe(map(res => res.json()));\n  }\n\n  // Function to edit/update blog post\n  editJoke(joke) {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    return this.http.put('jokes/updateJoke/', joke, this.options).pipe(map(res => res.json()));\n  }\n  deleteJoke(id) {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    return this.http.delete('jokes/deleteJoke/' + id, this.options).pipe(map(res => res.json()));\n  }\n  likeJoke(id) {\n    return this.http.put('jokes/likeJoke/', { id: id }, this.options).pipe(map(res => res.json()));\n  }\n\n  // Function to dislike a joke post\n  dislikeJoke(id) {\n    return this.http.put('jokes/dislikeJoke/', { id: id }, this.options).pipe(map(res => res.json()));\n  }\n\n  postComment(id, comment) {\n    this.authService.loadToken();\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authService.authToken // Attach token\n      })\n    });\n    const jokeData = {\n      id: id,\n      comment: comment\n    }\n    return this.http.post('jokes/comment', jokeData, this.options).pipe(map(res => res.json()));\n\n  }\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  validateRegister(user){\n    if(user.name==undefined || user.username==undefined || user.email==undefined || user.password==undefined  ){\n      return false;\n    \n    }else {\n      return true;\n    }\n  }\n  validateEmail(email){\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}